University of Queensland (UQ)
CSSE1001 Introduction to Software Engineering I
Exam 2013 Semester 2
What does the expression 7/2 + 2.0 evaluate to? §§ 1 §§ 5 §§ 5.0 §§ 5.5 §§ Error
What does the expression (7 + 4.0)/2 evaluate to? §§ 2 §§ 5 §§ 5.0 §§ 5.5 §§ Error
What does the expression int('2') * ['1', '3'] evaluate to? §§ 3 §§ [2, 6] §§ ['2', '6'] §§ ['1', '1', '3', '3'] §§ ['1', '3', '1', '3'] §§ Error
What does the expression '2' + ['1', '3'] evaluate to? §§ 4 §§ [3, 5] §§ ['3', '5'] §§ ['21', '23'] §§ ['2', '1', '3'] §§ Error
What does the expression [2] + ['1', '3'] evaluate to? §§ 2 §§ [3, 5] §§ ['2', '1', '3'] §§ [2, '1', '3'] §§ [2, 1, 3] §§ Error
After the assignment x = 'Very Naughty Boy', which of the following assigns 'u' to the variable y? §§ 0 §§ y = x[7] §§ y = x[6] §§ y = x[-8] §§ None of the above.
After the assignment x = 'Very Naughty Boy', which of the following assigns 'Naug' to the variable y? §§ 1 §§ y = x[5 : 8] §§ y = x[5 : 9] §§ y = x[6 : 9] §§ y = x[6 : 10] §§ None of the above
After the assignment x = 'Very Naughty Boy', which of the following assigns 'oy' to the variable y? §§ 2 §§ y = x[-2 : -1] §§ y = x[-3 : -1] §§ y = x[-2: ] §§ y = x[-3 : ] §§ None of the above
After the assignment x = 'Very Naughty Boy', which of the following assigns 'B y' to the variable y? §§ 3 §§ y = x[-3 : -7: -1] §§ y = x[-4: -7 : -1] §§ y = x[12 : 9 : -1] §§ y = x[13 : 10 : -1] §§ None of the above
After the assignment x = 'a,b,c,,d,', what does the expression <code>x.split(',', 4)</code> evaluate to? §§ 3  §§ ['a', 'b', 'c', 'd'] §§ ['a', 'b', 'c', '', 'd'] §§ ['a', 'b', 'c', 'd,'] §§ ['a', 'b', 'c', '', 'd,'] §§ Error
What is the value of y after the following is evaluated? <pre>y = [1, 2, 3, 4]<br />y.insert(2, y.pop(1))</pre> §§ 1 §§ [1, 2, 3, 4] §§ [1, 3, 2, 4] §§ [1, 3, 4, 2] §§ [2, 3, 1, 4] §§ Error
What is the value of y after the following is evaluated? <pre>d = {0:'Zero', 1:'One', 2:'Two', 5:'Unknown'}<br />d[3] = 'Three'<br />y = str(d[0])+str(d[3])+str(d[4])</pre> §§ 4 §§ '034' §§ 'ZeroThreeUnknown' §§ 'ZeroThreeFour' §§ 'ZeroThreeNone' §§ Error
What is the value of y after the following is evaluated? <pre>d = {0:'Zero', 1:'One', 2:'Two', 5:'Unknown'}<br />d[3] = 'Three'<br />y = str(d[0])+str(d[3])+str(d.get(4))</pre> §§ 3 §§ '034' §§ 'ZeroThreeUnknown' §§ 'ZeroThreeFour' §§ 'ZeroThreeNone' §§ Error
What is the value of y after the following is evaluated? <pre>d = {0:'Zero', 1:'One', 2:'Two', 5:'Unknown'}<br />d[3] = 'Three'<br />y = str(d[0])+str(d[3])+str(d.get(4,'Unknown'))<br /> §§ 1 §§ '034' §§ 'ZeroThreeUnknown' §§ 'ZeroThreeFour' §§ 'ZeroThreeNone' §§ Error
<pre>def m(a,b):<br />    if a > b:<br />        return (b, a-b)<br />    elif a < b:<br />        return (a, b-a)<br />    else:<br />        return (a,b)</pre> What is the value of n after the following is evaluated? n = m(6,2) §§ 0  §§ (2, 4) §§ (4, 2) §§ (4, -2) §§ (6, 2) §§ Error
<pre>def m(a,b):<br />    if a > b:<br />        return (b, a-b)<br />    elif a < b:<br />        return (a, b-a)<br />    else:<br />        return (a,b)</pre> What is the value of n after the following is evaluated? n = m((6,2)) §§ 4 §§ (2, 4) §§ (4, 2) §§ (4, -2) §§ (6, 2) §§ Error
<pre>def m(a,b):<br />    if a > b:<br />        return (b, a-b)<br />    elif a < b:<br >        return (a, b-a)<br />    else:<br />        return (a,b)</pre>What is the value of n after the following is evaluated? n = m(m(7,2)) §§ 4 §§ (2, 3) §§ (2, 5) §§ (3, 2) §§ (5, 2) §§ Error
<pre>def s(xs,n,m):<br />    t = []<br />    while n < m:<br />        t.append(xs[m])<br />        m -= 2<br />    return t</pre>What is the value of x after the following is evaluated? x = s([1,2,3,4,5], 0, 4) §§ 2  §§ [] §§ [3, 1] §§ [5, 3] §§ [4, 2] §§ Error
<pre>def s(xs,n,m):<br />    t = []<br />    while n < m:<br />        t.append(xs[m])<br />        m -= 2<br />    return t</pre>What is the value of x after the following is evaluated? x = s([1,2,3,4,5], 4, 0) §§ 0 §§ [] §§ [3, 1] §§ [5, 3] §§ [4, 2] §§ Error
<pre>def s(xs,n,m):<br />    t = []<br />    while n < m:<br />        t.append(xs[m])<br />        m -= 2 <br />    return t</pre>What is the value of x after the following is evaluated? x = s([1,2,3,4,5], 1, 4) §§ 2 §§ [] §§ [3, 1] §§ [5, 3] §§ [4, 2] §§ Error
<pre>def f(xs):<br />    i = 0<br />    r = []<br />    while -len(xs) < i < len(xs):<br />        d,v = xs[i]<br />        r.append(v)<br />        i += d<br />    return r</pre>What is the value of zs after the following is evaluated? zs = f([(1,'a'),(-2,'b'),(3,'c'), (-1,'d')]) §§ 3  §§ ['a', 'b', 'c', 'd', 'c'] §§ ['a', 'b', 'd', 'c', 'c'] §§ ['a', 'b', 'd', 'c', 'd', 'c'] §§ Non-terminating execution (possibly resulting in an out of memory error) §§ Error (other than non-termination/out of memory)
<pre>def f(xs):<br />    i = 0<br />    r = []<br />    while -len(xs) < i < len(xs):<br />        d,v = xs[i]<br />        r.append(v)<br />        i += d<br />    return r</pre>What is the value of zs after the following is evaluated? <code>zs = f([(1,'a'),(-2,'b'),(4,'c'), (-1,'d')])</code> §§ 1 §§ ['a', 'b', 'c', 'd', 'c'] §§ ['a', 'b', 'd', 'c', 'c'] §§ ['a', 'b', 'd', 'c', 'd', 'c'] §§ Non-terminating execution (possibly resulting in an out of memory error) §§ Error (other than non-termination/out of memory)
<pre>def f(xs):<br />    i = 0<br />    r = []<br />    while -len(xs) < i < len(xs):<br />        d,v = xs[i]<br />        r.append(v)<br />        i += d<br />    return r</pre>What is the value of zs after the following is evaluated? <code>zs = f([(1,'a'),(-2,'b'),(5,'c'), (-1,'d')])</code> §§ 2 §§ ['a', 'b', 'c', 'd', 'c'] §§ ['a', 'b', 'd', 'c', 'c'] §§ ['a', 'b', 'd', 'c', 'd', 'c'] §§ Non-terminating execution (possibly resulting in an out of memory error) §§ Error (other than non-termination/out of memory)
This function extracts URL information from the body of HTML text as in the example below. <pre>>>> text = """ &lt;body&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="/future-students">Future Students&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="/current-students">Current Students&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/body&gt;"""<br />>>> get_urls(text)<br />{'Current Student': '/current-students', 'Future Student': '/future-students'}</pre>The definition of the function get_urls is given below.<pre>def get_urls(text):<br />    """Return a dictionary that associates each URL with the text for that URL<br />    get_urls(str) -> dict(str:str)<br />    Precondition: text is valid HTML"""<br />    d = {}<br />    pos = 0<br />    next_pos = text.find("&lt;a href")<br />    while next_pos != -1:<br />        ## line 1 ##<br />        end_tag = text.find('>', next_pos)<br />        start_tag = text.find('<', end_tag)<br />        ## line 2 ##<br />        d[name] = url<br />        ## line 3 ##<br />    return d</pre>What is the required code for ## line 1 ##? §§ 1 §§ url = text[next_pos:].split('"', 2)[0] §§ url = text[next_pos:].split('"', 2)[1] §§ url = text[:next_pos].split('"', 2)[0] §§ url = text[:next_pos].split('"', 2)[1] §§ None of the above
This function extracts URL information from the body of HTML text as in the example below. <pre>>>> text = """ &lt;body&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="/future-students">Future Students&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="/current-students">Current Students&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/body&gt;"""<br />>>> get_urls(text)<br />{'Current Student': '/current-students', 'Future Student': '/future-students'}</pre>The definition of the function get_urls is given below.<pre>def get_urls(text):<br />    """Return a dictionary that associates each URL with the text for that URL<br />    get_urls(str) -> dict(str:str)<br />    Precondition: text is valid HTML"""<br />    d = {}<br />    pos = 0<br />    next_pos = text.find("&lt;a href")<br />    while next_pos != -1:<br />        ## line 1 ##<br />        end_tag = text.find('>', next_pos)<br />        start_tag = text.find('<', end_tag)<br />        ## line 2 ##<br />        d[name] = url<br />        ## line 3 ##<br />    return d</pre>What is the required code for ## line 2 ##? §§ 1 §§ name = text[end_tag:start_tag] §§ name = text[end_tag+1:start_tag] §§ name = text[end_tag:start_tag-1] §§ name = text[end_tag+1:start_tag-1] §§ None of the above
This function extracts URL information from the body of HTML text as in the example below. <pre>>>> text = """ &lt;body&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="/future-students">Future Students&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="/current-students">Current Students&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/body&gt;"""<br />>>> get_urls(text)<br />{'Current Student': '/current-students', 'Future Student': '/future-students'}</pre>The definition of the function get_urls is given below.<pre>def get_urls(text):<br />    """Return a dictionary that associates each URL with the text for that URL<br />    get_urls(str) -> dict(str:str)<br />    Precondition: text is valid HTML"""<br />    d = {}<br />    pos = 0<br />    next_pos = text.find("&lt;a href")<br />    while next_pos != -1:<br />        ## line 1 ##<br />        end_tag = text.find('>', next_pos)<br />        start_tag = text.find('<', end_tag)<br />        ## line 2 ##<br />        d[name] = url<br />        ## line 3 ##<br />    return d</pre>What is the required code for ## line 3 ##? §§ 2 §§ break §§ end_tag = text.find('>', start_tag) §§ next_pos = text.find("&lt;a href", start_tag) §§ end_tag = text.find('>', next_pos) §§ next_pos = text.find("&lt;a href", next_pos)
<pre>class BankAccount:<br />    def __init__(self, customer):<br />        """customer is the name of the account owner """<br />        self._customer = customer<br />        # the balance on the account in dollars<br />        self._balance = 0.0<br /><br />    def deposit(self, amount):<br />        """Deposit amount into the account. deposit(float) -> None """<br />        ## line 1 ##<br /><br />    def get_balance(self):<br />        """Get the balance. get_balance() -> float """<br />        ## line 2 ##</pre>Assume that the following has been evaluated. <code>mary = BankAccount('Mary')</code>What is the required code for ## line 1 ##? §§ 2 §§ _balance += amount §§ balance += amount §§ self._balance += amount §§ self.balance += amount §§ More than one of the above is correct.
<pre>class BankAccount:<br />    def __init__(self, customer):<br />        """customer is the name of the account owner """<br />        self._customer = customer<br />        # the balance on the account in dollars<br />        self._balance = 0.0<br /><br />    def deposit(self, amount):<br />        """Deposit amount into the account. deposit(float) -> None """<br />        ## line 1 ##<br /><br />    def get_balance(self):<br />        """Get the balance. get_balance() -> float """<br />        ## line 2 ##</pre>Assume that the following has been evaluated. <code>mary = BankAccount('Mary')</code> What is the required code for ## line 2 ##? §§ 3  §§ print self.balance §§ print self._balance §§ return self.balance §§ return self._balance §§ More than one of the above is correct.
<pre>class BankAccount:<br />    def __init__(self, customer):<br />        """customer is the name of the account owner """<br />        self._customer = customer<br />        # the balance on the account in dollars<br />        self._balance = 0.0<br /><br />    def deposit(self, amount):<br />        """Deposit amount into the account. deposit(float) -> None """<br />        ## line 1 ##<br /><br />    def get_balance(self):<br />        """Get the balance. get_balance() -> float """<br />        ## line 2 ##</pre>Assume that the following has been evaluated. <code>mary = BankAccount('Mary')</code> Which of the following correctly updates the balance by $2.75 for the object mary? §§ 0 §§ mary.deposit(2.75) §§ mary.deposit() + 2.75 §§ deposit(mary, 2.75) §§ deposit(mary) + 2.75 §§ More than one of the above is correct.
<pre>class A:<br />    def __init__(self, x):<br />        self.x = x<br />    def g(self, x):<br />        return self.f(x)<br />    def f(self, x):<br />        return 2*x<br /><br />class B(A):<br />    def g(self, y):<br />        return self.x + 2*y<br /><br />class C1(B):<br />    def __init__(self, x, y):<br />        B.__init__(self, x)<br />        self.y = y<br />    def f(self, x):<br />        return self.x + self.y<br /><br />class C2(B):<br />    def __init__(self, x, y):<br />        B.__init__(self, x)<br />        self.y = y<br />    def f(self, x):<br />        return x + self.x + self.y<br />a = A(3)<br  />b = B(3)<br />c1 = C1(3, 4)<br />c2 = C2(3, 4)</pre>What does the expression b.g(3) evaluate to? §§ 3 §§ 6 §§ 7 §§ 8 §§ 9 §§ 10
<pre>class A:<br />    def __init__(self, x):<br />        self.x = x<br />    def g(self, x):<br />        return self.f(x)<br />    def f(self, x):<br />        return 2*x<br /><br />class B(A):<br />    def g(self, y):<br />        return self.x + 2*y<br /><br />class C1(B):<br />    def __init__(self, x, y):<br />        B.__init__(self, x)<br />        self.y = y<br />    def f(self, x):<br />        return self.x + self.y<br /><br />class C2(B):<br />    def __init__(self, x, y):<br />        B.__init__(self, x)<br />        self.y = y<br />    def f(self, x):<br />       return x + self.x + self.y<br />a = A(3)<br  />b = B(3)<br />c1 = C1(3, 4)<br />c2 = C2(3, 4)</pre>What does the expression a.f(3) evaluate to? §§ 0 §§ 6 §§ 7 §§ 8 §§ 9 §§ 10
<pre>class A:<br />    def __init__(self, x):<br />        self.x = x<br />    def g(self, x):<br />        return self.f(x)<br />    def f(self, x):<br />        return 2*x<br /><br />class B(A):<br />    def g(self, y):<br />        return self.x + 2*y<br /><br />class C1(B):<br />    def __init__(self, x, y):<br />        B.__init__(self, x)<br />        self.y = y<br />    def f(self, x):<br />        return self.x + self.y<br /><br />class C2(B):<br />    def __init__(self, x, y):<br />        B.__init__(self, x)<br />        self.y = y<br />    def f(self, x):<br />       return x + self.x + self.y<br />a = A(3)<br  />b = B(3)<br />c1 = C1(3, 4)<br />c2 = C2(3, 4)</pre>What does the expression b.f(3) evaluate to? §§ 0 §§ 6 §§ 7 §§ 8 §§ 9 §§ 10
<pre>class A:<br />    def __init__(self, x):<br />        self.x = x<br />    def g(self, x):<br />        return self.f(x)<br />    def f(self, x):<br />        return 2*x<br /><br />class B(A):<br />    def g(self, y):<br />        return self.x + 2*y<br /><br />class C1(B):<br />    def __init__(self, x, y):<br />        B.__init__(self, x)<br />        self.y = y<br />    def f(self, x):<br />        return self.x + self.y<br /><br />class C2(B):<br />    def __init__(self, x, y):<br />        B.__init__(self, x)<br />        self.y = y<br />    def f(self, x):<br />       return x + self.x + self.y<br />a = A(3)<br  />b = B(3)<br />c1 = C1(3, 4)<br />c2 = C2(3, 4)</pre>What does the expression c1.f(3) evaluate to? §§ 1 §§ 6 §§ 7 §§ 8 §§ 9 §§ 10
<pre>class A:<br />    def __init__(self, x):<br />        self.x = x<br />    def g(self, x):<br />        return self.f(x)<br />    def f(self, x):<br />        return 2*x<br /><br />class B(A):<br />    def g(self, y):<br />        return self.x + 2*y<br /><br />class C1(B):<br />    def __init__(self, x, y):<br />        B.__init__(self, x)<br />        self.y = y<br />    def f(self, x):<br />        return self.x + self.y<br /><br />class C2(B):<br />    def __init__(self, x, y):<br />        B.__init__(self, x)<br />        self.y = y<br />    def f(self, x):<br />       return x + self.x + self.y<br />a = A(3)<br  />b = B(3)<br />c1 = C1(3, 4)<br />c2 = C2(3, 4)</pre>What does the expression c2.f(3) evaluate to? §§ 4 §§ 6 §§ 7 §§ 8 §§ 9 §§ 10
Examples of calling the function. <pre>>>> flatten([])<br />[]<br />>>> flatten([1,2,3])<br />[1, 2, 3]<br />>>> flatten([[1],2,3,[4,[5,6]]])<br />[1, 2, 3, 4, 5, 6]</pre>What is the required code for ## line 1 ## in order to complete the following recursive definition for flattening a nested list?<pre>def flatten(xs):<br />    """Return the flattened elements of a nested list """<br />    result = []<br />    for x in xs:<br />        if type(x) == type([]): # x is a list<br />            ## line 1 ##<br />        else:<br />            result.append(x)<br />    return result</pre> §§ 1 §§ result.append(flatten(x)) §§ result.extend(flatten(x)) §§ result = flatten(result) + x §§ result = flatten(result) + [x] §§ None of the above
What is the time complexity, in terms of the length of the sorted list xs for the following function that tests to see if the sorted list has repeated elements? You may assume accessing elements of a list, and the arithmetic operations and test are all constant time operations.<pre>def has_repeats(xs):<br />    """Return True iff xs has repeated elements.<br />    EG has_repeats([1,2,3,4]) == False<br />    has_repeats([1,1,2,4]) == True<br />    has_repeats(list(X)) -> bool<br />    Precondition: xs is sorted"""<br />    size = len(xs)<br />    for i in range(size-1):<br />        if xs[i] == xs[i+1]: return True<br />    return False §§ 2 §§ Constant §§ Logarithmic §§ Linear §§ Quadratic §§ Exponential
What is the time complexity, in terms of the length of the list, of the following function that returns maximum element of a list of integers where the elements first strictly increase and then strictly decrease. There are no repeated elements. You may assume accessing elements of a list, and the arithmetic operations and test are all constant time operations.<pre>def hump_max(xs):<br />    """Return the maximum value in xs<br />    EG hump_max([1,2,1,0]) == 2 hump_max([1,2,3,0]) == 3<br />    hump_max(list(int)) -> int<br />    Precondition: the elements in xs first strictly increase and then strictly decrease."""<br />    low = 0<br />    hi = len(xs) - 1<br />    while low < hi:<br />        mid = (hi+low)/2<br />        if xs[mid-1] < xs[mid] < xs[mid+1]: low = mid+1<br />        elif xs[mid-1] > xs[mid] > xs[mid+1]: hi = mid-1<br />        else: low = hi<br />    return xs[mid] §§ 1 §§ Constant §§ Logarithmic §§ Linear §§ Quadratic §§ Exponential
The file data.txt (given below) contains four lines with the third line containing only space characters.<pre>1,2,3<br />8<br />2,5</pre>What is the value of y after the following has been evaluated?<pre>fp = open('data.txt', 'rU')<br />y = [(i,sum([int(n) for n in x.strip().split(',')])) \<br />for i,x in enumerate(fp) if x.strip() != '']</pre> §§ 2 §§ [(0, 6), (1, 8), (2, 0), (3, 7)] §§ [(0, 6), (1, 8), (2, 7)] §§ [(0, 6), (1, 8), (3, 7)] §§ [(1, 6), (2, 8), (3, 7)] §§ [(1, 6), (2, 8), (4, 7)]
